name: pipeline for test environment - frontend

# on:
#   workflow_run:
#     workflows:
#       - "pipeline for test environment - backend"
#     types:
#       - completed

permissions: 
  contents: read
  pull-requests: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code  
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Configure Docker to use Google Cloud credentials
        run: |
          gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: change backend URL
        run: |
          echo "hello world"

      - name: Build test frontend Docker image 
        run: |   
          IMAGE_NAME="europe-west1-docker.pkg.dev/buzzwatch-422510/mutualism/mutualism-frontend"  
          TAG="2" 
          docker build -t "$IMAGE_NAME:$TAG" frontend

      - name: Push test frontend Docker image to GCR
        run: |
          IMAGE_NAME="europe-west1-docker.pkg.dev/buzzwatch-422510/mutualism/mutualism-frontend-test"  
          TAG="2" 
          docker push "$IMAGE_NAME:$TAG"

      - name: deploy test frontend
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: 'mutualism-frontend'
          region: 'europe-west1'
          image: 'europe-west1-docker.pkg.dev/buzzwatch-422510/mutualism/mutualism-frontend-test:2'

      - name: get test frontend url
        run: | 
          IP_ADDRESS=$(gcloud cloud run describe mutualism-frontend-test \
                       --zone=europe-west1-d \
                       --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "FRONTEND_URL=$IP_ADDRESS" >> $GITHUB_ENV

      - name: wait for frontend to be up and running 
        run: | 
          echo "Waiting for frontend to be available at $FRONTEND_URL"
          
          while : ; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL || true) 
            
            if [[ "$RESPONSE" == "200" ]]; then
              echo "Frontend is now available!"
              break
            else
              echo "Frontend not available yet. Response code: $RESPONSE. Retrying..."
              sleep 5
            fi
          done

      - name: Install dependencies
        run: npm install

      - name: Install Playwright Browsers
        run: npx playwright install

      - name: Run Playwright Tests
        run: npm run test:e2e

     